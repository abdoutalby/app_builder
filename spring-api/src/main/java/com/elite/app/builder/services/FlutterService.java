package com.elite.app.builder.services;

import lombok.extern.slf4j.Slf4j;
import org.springframework.core.io.InputStreamResource;
import org.springframework.core.io.Resource;
import org.springframework.core.io.UrlResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.multipart.MultipartFile;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;

@Service
@Slf4j
public class FlutterService {
    public boolean create(MultipartFile file , String     appname  ) {
        try {

            String command = "flutter create --org com.elite "+appname;
            log.info(command);
            Process process = Runtime.getRuntime().exec(command);

             int exitCode = process.waitFor();

             if (exitCode != 0) {
                log.info("Failed to create Flutter project {}", exitCode);

                return false;
            }

             File libDirectory = new File(appname+"/lib");
            if (!libDirectory.exists()) {
                libDirectory.mkdirs();  
                log.info("create lib folder ");

            }
            File pdfAssetsDirectory = new File(appname+"/assets/pdf");
            if (!pdfAssetsDirectory.exists()) {
                pdfAssetsDirectory.mkdirs();
                log.info("create lib folder assets pdf");
            }
            File imgAssetsDirectory = new File(appname+"/assets/images");
            if (!imgAssetsDirectory.exists()) {
                imgAssetsDirectory.mkdirs();
                log.info("create lib folder assets images");

            }
            File pubspecFile = new File(appname , "pubspec.yaml");
            if (pubspecFile.exists()){
                log.info("updating pubspec.yaml");

                var pubSpecContent = """
                        name:\s""" + appname + """ 
                        \ndescription: "A new Flutter project generated by elite pdf app builder."
                        publish_to: 'none' # Remove this line if you wish to publish to pub.dev
                        
                        version: 1.0.0+1
                        
                        environment:
                          sdk: ^3.5.4
                        
                        dependencies:
                          flutter:
                            sdk: flutter
                          get:
                          widget_and_text_animator:
                          http:
                          iconsax:
                          animate_do:
                          pdfx:
                          flutter_tts:
                          syncfusion_flutter_pdf:\s
                          cupertino_icons: ^1.0.8
                          path_provider:
                        dev_dependencies:
                          flutter_test:
                            sdk: flutter
                        
                          flutter_lints: ^4.0.0\s
                        
                        \s
                        \s
                        flutter:
                          uses-material-design: true
                        
                          # To add assets to your application, add an assets section, like this:
                          assets:
                            - assets/images/
                            - assets/pdf/file.pdf
                        """;
                try (BufferedWriter writer = new BufferedWriter(new FileWriter(pubspecFile))) {
                    writer.write(pubSpecContent);  
                }
            } else {
               return false;

            }


            File settings = new File(appname+"/android" , "settings.gradle");
            if (settings.exists()){
                log.info("updating settings.gradle");

                var settingsContent = """
                        pluginManagement {
                            def flutterSdkPath = {
                                def properties = new Properties()
                                file("local.properties").withInputStream { properties.load(it) }
                                def flutterSdkPath = properties.getProperty("flutter.sdk")
                                assert flutterSdkPath != null, "flutter.sdk not set in local.properties"
                                return flutterSdkPath
                            }()
                        
                            includeBuild("$flutterSdkPath/packages/flutter_tools/gradle")
                        
                            repositories {
                                google()
                                mavenCentral()
                                gradlePluginPortal()
                            }
                        }
                        
                        plugins {
                            id "dev.flutter.flutter-plugin-loader" version "1.0.0"
                            id "com.android.application" version "8.3.2" apply false
                            id "org.jetbrains.kotlin.android" version "2.0.20" apply false
                        }
                        
                        include ":app"
                   
                        """;
                try (BufferedWriter writer = new BufferedWriter(new FileWriter(settings))) {
                    writer.write(settingsContent);  
                }
            } else {
                return false;

            }

            File gradleWrapper = new File(appname+"/android/gradle/wrapper" , "gradle-wrapper.properties");
            if (gradleWrapper.exists()){
                log.info("updating gradle-wrapper.properties");

                var gradleContent = """
                        distributionBase=GRADLE_USER_HOME
                        distributionPath=wrapper/dists
                        zipStoreBase=GRADLE_USER_HOME
                        zipStorePath=wrapper/dists
                        distributionUrl=https://services.gradle.org/distributions/gradle-8.4-all.zip
                        """;
                try (BufferedWriter writer = new BufferedWriter(new FileWriter(gradleWrapper))) {
                    writer.write(gradleContent);  
                }
            } else {
                return false;

            }

            File buildGradle = new File(appname+"/android/app" , "build.gradle");
            if (buildGradle.exists()){
                log.info("updating build.gradle");
                var namespace = "com.elite."+appname;
                var buildGradleContent = """
                        plugins {
                            id "com.android.application"
                            id "kotlin-android"
                            // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
                            id "dev.flutter.flutter-gradle-plugin"
                        }
                        """ +
                        "android {"+
                        "    namespace = \"" + namespace + "\"\n" +
                        """
                            compileSdk = flutter.compileSdkVersion
                            ndkVersion = "25.1.8937393"
                       \s
                            compileOptions {
                                sourceCompatibility = JavaVersion.VERSION_17
                                targetCompatibility = JavaVersion.VERSION_17
                            }
                       \s
                            kotlinOptions {
                                jvmTarget = JavaVersion.VERSION_17
                            }
                       \s
                            defaultConfig {
                                // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
                               \s""" +
                               " applicationId = \"" + namespace + "\"\n" +
                """                    
            // You can update the following values to match your application needs.
                                // For more information, see: https://flutter.dev/to/review-gradle-config.
                                minSdk = flutter.minSdkVersion
                                targetSdk = flutter.targetSdkVersion
                                versionCode = flutter.versionCode
                                versionName = flutter.versionName
                            }
                        
                            buildTypes {
                                release {
                                    // TODO: Add your own signing config for the release build.
                                    // Signing with the debug keys for now, so `flutter run --release` works.
                                    signingConfig = signingConfigs.debug
                                }
                            }
                        }
                        
                        flutter {
                            source = "../.."
                        }
                        
                        """;
                try (BufferedWriter writer = new BufferedWriter(new FileWriter(buildGradle))) {
                    writer.write(buildGradleContent);  
                }
            } else {
                return false;

            }

             File screensFolder = new File(libDirectory, "screens");
            File controllersFolder = new File(libDirectory, "controllers");
            if (!screensFolder.exists() ) {
                log.info("creating screens folder");
                screensFolder.mkdirs();
            }
            if (!controllersFolder.exists() ) {
                log.info("creating controllers folder");
                controllersFolder.mkdirs();  
            }

            File mainDartFile = new File(libDirectory, "main.dart");
            if (mainDartFile.exists()) {
                String customContent = """
                               import 'package:flutter/material.dart';
                                import 'package:get/get.dart';
                                import 'screens/screens.dart';
                                        void main() {
                                          runApp(
                                            GetMaterialApp(
                                              debugShowCheckedModeBanner: false,
                                              home: LoginPage(),
                                            ),
                                          );
                                        }
                """;

                try (BufferedWriter writer = new BufferedWriter(new FileWriter(mainDartFile))) {
                    writer.write(customContent);  
                    log.info("updating main.dart");
                }
            } else {
                return false;

            }

            File Controllers = new File(controllersFolder, "controller.dart");


            String controllersContent = """
                        import 'dart:convert';
                        import 'dart:io';
                        import 'package:flutter/services.dart';
                        import 'package:flutter_tts/flutter_tts.dart';
                        import 'package:get/get.dart';
                        import 'package:flutter/material.dart';
                        import 'package:pdfx/pdfx.dart';
                        import 'package:http/http.dart' as http;
                        import 'package:syncfusion_flutter_pdf/pdf.dart' as syncfusion;
                        import 'package:path_provider/path_provider.dart';
                        
                        class PdfViewerController extends GetxController
                            with SingleGetTickerProviderMixin {
                          late AnimationController foldAnimationController;
                          var currentPage = 1.obs;
                          var totalPages = 0.obs;
                          var isLoading = true.obs;
                          var loadingError = false.obs;
                          late PdfController? pdfController;
                          late FlutterTts flutterTts;
                          final String pdfPath = 'assets/pdf/file.pdf'; // URL of the PDF à charger
                          late AnimationController animationController;
                          late Animation<double> foldAnimation;
                          File? downloadedPdfFile;
                          String extractedText = '';
                          String translatedText = '';
                          var currentIndex = 0.obs;
                          var audioLanguage = 'en'.obs;
                          var translationLanguage = 'en'.obs;
                          var sumText = ''.obs;
                          var pdfUrl = '';
                        
                          var isTranslated = false.obs;
                        
                          var isSpeaking = false.obs;
                        
                          var isSummarized = false.obs;
                        
                          @override
                          onInit() async {
                            super.onInit();
                            animationController = AnimationController(
                              duration: const Duration(milliseconds: 700),
                              vsync: this,
                            );
                            foldAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
                              CurvedAnimation(parent: animationController, curve: Curves.easeInOut),
                            );
                            flutterTts = FlutterTts();
                        
                            flutterTts.completionHandler = () {
                              isSpeaking.value = false;
                            };
                            _initializePdf();
                            getFileFromAssets();
                          }
                        
                          getFileFromAssets() async {
                            // Load the asset data as bytes
                            final byteData = await rootBundle.load('assets/pdf/file.pdf');
                        
                            // Get a temporary directory
                            final tempDir = await getTemporaryDirectory();
                        
                            // Create a file in the temporary directory
                            final file = File('${tempDir.path}/file.pdf');
                        
                            // Write the bytes to the file
                            await file.writeAsBytes(byteData.buffer.asUint8List());
                        
                            downloadedPdfFile = file;
                            print(downloadedPdfFile?.path);
                          }
                        
                          Future<void> _initializePdf() async {
                            try {
                              final pdfDocument = PdfDocument.openAsset(pdfPath);
                              pdfController = PdfController(
                                document: pdfDocument,
                                initialPage: 1,
                              );
                        
                              isLoading.value = false;
                              loadingError.value = false;
                            } catch (e) {
                              loadingError.value = true;
                              isLoading.value = false;
                              print(e);
                              Get.snackbar(
                                " failed",
                                " failed : ${e}.",
                                snackPosition: SnackPosition.BOTTOM,
                              );
                            }
                          }
                        
                          void goToPage(int page) {
                            if (currentPage.value != page) {
                              currentPage.value = page;
                              pdfController?.animateToPage(
                                page,
                                duration: const Duration(milliseconds: 500),
                                curve: Curves.ease,
                              );
                              animationController.forward(from: 0.0);
                              loadTextFromPdf(); // Charger le texte après navigation
                            }
                          }
                        
                          void onStopPressed() {
                            flutterTts.stop();
                            isSpeaking.value = false;
                          }
                        
                          Future<String> fetchTranslation(String text, String audioLanguage) async {
                            isLoading.value = true;
                            String targetLang = audioLanguage;
                            const String apiUrl = 'https://sd3.savooria.com/translate';
                        
                            final Map<String, dynamic> body = {
                              'text': text,
                              'targetLang': targetLang,
                            };
                        
                            final response = await http.post(
                              Uri.parse(apiUrl),
                              headers: {'Content-Type': 'application/json'},
                              body: json.encode(body),
                            );
                            if (response.statusCode == 200) {
                              final Map<String, dynamic> responseData = json.decode(response.body);
                              isLoading.value = false;
                              return responseData['translatedText'] ?? 'Translation not available';
                            } else {
                              isLoading.value = false;
                              return 'Failed to load translation';
                            }
                          }
                        
                          loadTextFromPdf() {
                            if (downloadedPdfFile == null) {
                              return;
                            }
                        
                            try {
                              final document = syncfusion.PdfDocument(
                                  inputBytes: downloadedPdfFile!.readAsBytesSync());
                              extractedText = syncfusion.PdfTextExtractor(document)
                                  .extractText(startPageIndex: currentPage.value - 1);
                              document.dispose();
                            } catch (e) {
                              Get.snackbar(
                                " Error",
                                " Error : ${e}.",
                                snackPosition: SnackPosition.BOTTOM,
                              );
                            }
                            return extractedText;
                          }
                        
                          @override
                          void onClose() {
                            super.onClose();
                            flutterTts.stop();
                            animationController.dispose();
                            pdfController?.dispose();
                          }
                        
                          void summarize() async {
                            isLoading.value = true;
                            isSummarized.value = true;
                            try {
                              var requestBody = json.encode({
                                "file_url": pdfUrl,
                                "question": 'Summarize this File',
                              });
                              var summarizeResponse = await http.post(
                                Uri.parse('https://sd2.savooria.com/summarize'),
                                headers: {'Content-Type': 'application/json'},
                                body: requestBody,
                              );
                              isLoading.value = false;
                        
                              sumText.value = jsonDecode(summarizeResponse.body)["summary"];
                            } catch (e) {
                              Get.snackbar(
                                " Error",
                                " Error : ${e}.",
                                snackPosition: SnackPosition.BOTTOM,
                              );
                            }
                          }
                        
                          translate() async {
                            isTranslated.value = false;
                            if (!isLoading.value) {
                              isLoading.value = true;
                              const apiUrl = 'https://sd3.savooria.com/translate';
                        
                              var body = {
                                'text': cleanExtractedText(loadTextFromPdf()),
                                'targetLang': translationLanguage.value,
                              };
                              final response = await http.post(
                                Uri.parse(apiUrl),
                                headers: {'Content-Type': 'application/json'},
                                body: json.encode(body),
                              );
                              if (response.statusCode == 200) {
                                isLoading.value = false;
                                isTranslated.value = true;
                                var responseData = json.decode(response.body);
                                translatedText = responseData["translatedText"];
                                isTranslated.value = true;
                                return responseData;
                              } else {
                                isLoading.value = false;
                                isTranslated.value = true;
                        
                                return 'Failed to load translation';
                              }
                            }
                          }
                        
                          String cleanExtractedText(String text) {
                            return text
                                .replaceAll(
                                    RegExp(r'^\\s*$\\n', multiLine: true), '') // Remove empty lines
                                .replaceAll(
                                    RegExp(r'^\\d+\\.\\s*', multiLine: true), '') // Remove numbered lists
                                .replaceAll(RegExp(r'\\. '), '.\\n'); // Add a newline after each period
                          }
                        
                          void speak() async {
                            switch (audioLanguage.value) {
                              case 'en':
                                flutterTts.setLanguage('es-US');
                              case 'ar':
                                flutterTts.setLanguage('ar');
                              case 'fr':
                                flutterTts.setLanguage('fr-CA');
                              case 'es':
                                flutterTts.setLanguage('es-ES');
                                break;
                              default:
                            }
                            flutterTts.stop();
                            var txtToRead =
                                await fetchTranslation(loadTextFromPdf(), audioLanguage.value);
                            flutterTts.speak(txtToRead);
                            isSpeaking.value = true;
                          }
                        
                          final TextEditingController messageController = TextEditingController();
                          ScrollController chatScrollerController = ScrollController();
                          var chat = ChatRequest(messages: [
                            chatMessage(role: 'system', content: "Hi! How can i assist you ?")
                          ], model: "llama2")
                              .obs;
                          var isProcessing = false.obs;
                        
                          sendMessage() async {
                            final message = messageController.text;
                            chat.value.messages!.add(chatMessage(role: "user", content: message));
                            chatScrollerController.animateTo(
                                curve: Curves.decelerate,
                                chatScrollerController.position.maxScrollExtent,
                                duration: const Duration(seconds: 1));
                        
                            messageController.clear();
                            isProcessing.value = true;
                        
                            var body = chat.value.toJson();
                        
                            final response = await http.post(Uri.parse('https://sd5.savooria.com/chat'),
                                headers: {'Content-type': 'application/json'}, body: jsonEncode(body));
                            print(response.body);
                            chatScrollerController.animateTo(
                                chatScrollerController.position.maxScrollExtent +
                                    chatScrollerController.offset,
                                curve: Curves.easeOut,
                                duration: const Duration(microseconds: 500));
                            if (response.statusCode == 200) {
                              isProcessing.value = false;
                              var callResult = jsonDecode(response.body);
                              chat.value.messages!.add(chatMessage(
                                  role: "system", content: callResult["message"]["content"]));
                              print(chat.value.messages!);
                            } else {
                              print(response.statusCode);
                              print(response.body.toString());
                        
                              isProcessing.value = false;
                              throw Exception('failed'.tr);
                            }
                          }
                        }
                        
                        class ChatRequest {
                          List<chatMessage>? messages;
                          String? model;
                        
                          ChatRequest({this.messages, this.model});
                        
                          ChatRequest.fromJson(Map<String, dynamic> json) {
                            if (json['messages'] != null) {
                              messages = <chatMessage>[];
                              json['messages'].forEach((v) {
                                messages!.add(chatMessage.fromJson(v));
                              });
                            }
                            model = json['model'];
                          }
                        
                          Map<String, dynamic> toJson() {
                            final Map<String, dynamic> data = <String, dynamic>{};
                            if (messages != null) {
                              data['messages'] = messages!.map((v) => v.toJson()).toList();
                            }
                            data['model'] = model;
                            return data;
                          }
                        }
                        
                        class chatMessage {
                          String? role;
                          String? content;
                        
                          chatMessage({this.role, this.content});
                        
                          chatMessage.fromJson(Map<String, dynamic> json) {
                            role = json['role'];
                            content = json['content'];
                          }
                        
                          Map<String, dynamic> toJson() {
                            final Map<String, dynamic> data = <String, dynamic>{};
                            data['role'] = role;
                            data['content'] = content;
                            return data;
                          }
                        }
                """;

            try (BufferedWriter writer = new BufferedWriter(new FileWriter(Controllers))) {
                writer.write(controllersContent);  

            }
            // Step 5: Modify the main.dart file
            File screens = new File(screensFolder, "screens.dart");
            String screensContent = """
                        import 'package:flutter/material.dart';
                                import 'package:get/get.dart';
                                import 'dart:math' as math;
                                import 'package:iconsax/iconsax.dart';
                                import 'package:pdfx/pdfx.dart';
                                import '../controllers/controller.dart';
                        
                        class LoginPage extends StatefulWidget {
                          @override
                          _LoginPageState createState() => _LoginPageState();
                        }
                        
                        class _LoginPageState extends State<LoginPage> {
                          final TextEditingController _emailController = TextEditingController();
                          final TextEditingController _passwordController = TextEditingController();
                        
                          @override
                          Widget build(BuildContext context) {
                            return Scaffold(
                              body: SafeArea(
                                child: Padding(
                                  padding: const EdgeInsets.all(20.0),
                                  child: Column(
                                    mainAxisAlignment: MainAxisAlignment.center,
                                    crossAxisAlignment: CrossAxisAlignment.center,
                                    children: [
                                      Text(
                                        'Welcome Back!',
                                        style: TextStyle(
                                          fontSize: 32,
                                          fontWeight: FontWeight.bold,
                                          color: Colors.black,
                                        ),
                                      ),
                                      SizedBox(height: 20),
                                      Text(
                                        'Sign in to continue',
                                        style: TextStyle(
                                          fontSize: 16,
                                          color: Colors.grey[600],
                                        ),
                                      ),
                                      SizedBox(height: 40),
                                      TextField(
                                        controller: _emailController,
                                        decoration: InputDecoration(
                                          hintText: 'Email',
                                          prefixIcon: Icon(Icons.email),
                                          border: OutlineInputBorder(),
                                          contentPadding:
                                              EdgeInsets.symmetric(vertical: 15, horizontal: 20),
                                        ),
                                        keyboardType: TextInputType.emailAddress,
                                      ),
                                      SizedBox(height: 20),
                                      TextField(
                                        controller: _passwordController,
                                        decoration: InputDecoration(
                                          hintText: 'Password',
                                          prefixIcon: Icon(Icons.lock),
                                          border: OutlineInputBorder(),
                                          contentPadding:
                                              EdgeInsets.symmetric(vertical: 15, horizontal: 20),
                                        ),
                                        obscureText: true,
                                      ),
                                      SizedBox(height: 20),
                                      ElevatedButton(
                                        onPressed: () {
                                          Get.to(() => PdfMainScreen());
                                        },
                                        style: ElevatedButton.styleFrom(
                                          minimumSize: Size(double.infinity, 50),
                                          backgroundColor: Colors.blue,
                                          shape: RoundedRectangleBorder(
                                            borderRadius: BorderRadius.circular(30),
                                          ),
                                        ),
                                        child: Text(
                                          'Log In',
                                          style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                                        ),
                                      ),
                                      SizedBox(height: 20),
                                      GestureDetector(
                                        onTap: () {
                                          // Navigate to Sign Up or Forgot Password screen
                                        },
                                        child: Text(
                                          'Forgot Password?',
                                          style: TextStyle(color: Colors.blue),
                                        ),
                                      ),
                                    ],
                                  ),
                                ),
                              ),
                            );
                          }
                        }
                        
                        class PdfMainScreen extends StatefulWidget {
                          const PdfMainScreen({
                            Key? key,
                          }) : super(key: key);
                        
                          @override
                          _PdfMainScreenState createState() => _PdfMainScreenState();
                        }
                        
                        class _PdfMainScreenState extends State<PdfMainScreen>
                            with SingleTickerProviderStateMixin {
                          final List<Widget> pages = [
                            Center(child: Text('Search Page')),
                            Center(child: Text('Profile Page')),
                          ];
                          final bottom_items = [
                            BottomNavigationBarItem(
                              icon: const Icon(Iconsax.book),
                              activeIcon: const Icon(Iconsax.book, color: Colors.blueGrey),
                              label: 'Summary'.tr,
                              tooltip: "Summary Page".tr,
                            ),
                            BottomNavigationBarItem(
                              icon: const Icon(Iconsax.translate),
                              activeIcon: const Icon(Iconsax.translate, color: Colors.blueGrey),
                              label: 'Translating'.tr,
                              tooltip: "Translating Page".tr,
                            ),
                            BottomNavigationBarItem(
                              icon: const Icon(Iconsax.message),
                              activeIcon: const Icon(Iconsax.message, color: Colors.blueGrey),
                              label: 'Chatting'.tr,
                              tooltip: "Chatting Page".tr,
                            ),
                            BottomNavigationBarItem(
                              icon: const Icon(Iconsax.headphone),
                              activeIcon: const Icon(Iconsax.headphone, color: Colors.blueGrey),
                              label: 'Listening'.tr,
                              tooltip: "Listening Page".tr,
                            )
                          ];
                        
                          late PdfViewerController controller;
                        
                          @override
                          void initState() {
                            super.initState();
                            controller = Get.put(PdfViewerController());
                          }
                        
                          @override
                          void dispose() {
                            controller.dispose();
                            super.dispose();
                          }
                        
                          @override
                          Widget build(BuildContext context) {
                            return Scaffold(
                                appBar: AppBar(
                                  title: Obx(
                                      () => Text(bottom_items[controller.currentIndex.value].label!)),
                                  actions: [
                                    Obx(() => controller.currentIndex.value != 0 &&
                                            controller.currentIndex.value != 2
                                        ? PopupMenuButton<String>(
                                            icon: const Icon(Iconsax.language_circle),
                                            onSelected: (value) {
                                              handleSelectedSetting(value);
                                            },
                                            itemBuilder: (BuildContext context) => getSettingsItems())
                                        : const Center()),
                                    Obx(() {
                                      if (controller.currentIndex.value == 3) {
                                        return IconButton(
                                          onPressed: controller.isSpeaking.value
                                              ? controller.onStopPressed
                                              : controller.speak,
                                          icon: Icon(controller.isSpeaking.value
                                              ? Iconsax.stop
                                              : Iconsax.play),
                                        );
                                      }
                                      if (controller.currentIndex.value == 1) {
                                        return IconButton(
                                          onPressed: () => controller.translate(),
                                          icon: const Icon(Iconsax.translate),
                                        );
                                      }
                                      if (controller.currentIndex.value == 0) {
                                        return IconButton(
                                          onPressed: () => controller.summarize(),
                                          icon: const Icon(Iconsax.book),
                                        );
                                      }
                                      return const SizedBox
                                          .shrink(); // Returns an empty widget instead of Center()
                                    }),
                                  ],
                                ),
                                body: Obx(() {
                                  switch (controller.currentIndex.value) {
                                    case 0: //summury
                                      return controller.isSummarized.value
                                          ? SummarizedView()
                                          : MainView();
                                    case 1: //translating
                                      return controller.isTranslated.value
                                          ? TranslatedView()
                                          : MainView();
                                    case 2: //  chatting
                                      return chatUi();
                                    case 3: //listening
                                      return ListeningView();
                                    default:
                                      return MainView();
                                  }
                                }),
                                bottomNavigationBar: Obx(
                                  () => BottomNavigationBar(
                                    currentIndex: controller.currentIndex.value,
                                    selectedItemColor: Colors.blueGrey,
                                    unselectedItemColor: Colors.grey[400],
                                    selectedLabelStyle: const TextStyle(fontWeight: FontWeight.w600),
                                    onTap: (i) => controller.currentIndex.value = i,
                                    items: bottom_items,
                                  ),
                                ));
                          }
                        
                          TranslatedView() {
                            return SingleChildScrollView(
                              child: Padding(
                                padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 24.0),
                                child: Text(
                                  controller.translatedText,
                                  style: TextStyle(
                                    fontSize: 18,
                                    fontWeight: FontWeight.w500,
                                    fontFamily: 'Georgia',
                                    color: Colors.black,
                                    letterSpacing: -0.5,
                                    height: 1.2,
                                  ),
                                ),
                              ),
                            );
                          }
                        
                          SummarizedView() {
                            return controller.isLoading.value
                                ? Center(
                                    child: CircularProgressIndicator(),
                                  )
                                : SingleChildScrollView(
                                    child: Padding(
                                      padding:
                                          const EdgeInsets.symmetric(horizontal: 16.0, vertical: 24.0),
                                      child: Center(
                                        child: Text(
                                          textAlign: TextAlign.center,
                                          controller.sumText.value,
                                          style: const TextStyle(
                                            fontSize: 18,
                                            fontWeight: FontWeight.w500,
                                            fontFamily: 'Georgia',
                                            color: Colors.black,
                                            letterSpacing: -0.5,
                                            height: 1.2,
                                          ),
                                        ),
                                      ),
                                    ),
                                  );
                          }
                        
                          MainView() {
                            return Obx(() {
                              if (controller.isLoading.value) {
                                return const Center(
                                  child: CircularProgressIndicator(),
                                );
                              } else if (controller.pdfController == null) {
                                return const Center(
                                  child: Text('PDF non initialisé'),
                                );
                              } else {
                                return SizedBox(
                                    height: Get.height * 0.9,
                                    width: Get.width,
                                    child: Stack(
                                      children: [
                                        AnimatedBuilder(
                                          animation: controller.foldAnimation,
                                          builder: (context, child) {
                                            final isFoldingPage = controller.foldAnimation.value < 1;
                                            final rotationAngle = isFoldingPage
                                                ? controller.foldAnimation.value * (math.pi / 2)
                                                : (1 - controller.foldAnimation.value) * (math.pi / 2);
                        
                                            return Transform(
                                              alignment: Alignment.centerLeft,
                                              transform: Matrix4.identity()
                                                ..setEntry(3, 2, 0.001)
                                                ..rotateY(rotationAngle),
                                              child: PdfView(
                                                key: ValueKey<int>(controller.currentPage.value),
                                                controller: controller.pdfController!,
                                                scrollDirection: Axis.horizontal,
                                                onPageChanged: (page) {
                                                  controller.goToPage(page);
                                                },
                                              ),
                                            );
                                          },
                                        ),
                                      ],
                                    ));
                              }
                            });
                          }
                        
                          getSettingsItems() {
                            switch (controller.currentIndex.value) {
                              case 0:
                                return [];
                              case 1:
                                return [
                                  const PopupMenuItem<String>(
                                    value: 'translate_to_en',
                                    child: Text('English'),
                                  ),
                                  const PopupMenuItem<String>(
                                    value: 'translate_to_fr',
                                    child: Text('French'),
                                  ),
                                  const PopupMenuItem<String>(
                                    value: 'translate_to_ar',
                                    child: Text('Arabic'),
                                  ),
                                  const PopupMenuItem<String>(
                                    value: 'translate_to_sp',
                                    child: Text('Spanish'),
                                  )
                                ];
                              case 3:
                                return [
                                  const PopupMenuItem<String>(
                                    value: 'listen_to_en',
                                    child: Text('English'),
                                  ),
                                  const PopupMenuItem<String>(
                                    value: 'listen_to_fr',
                                    child: Text('French'),
                                  ),
                                  const PopupMenuItem<String>(
                                    value: 'listen_to_ar',
                                    child: Text('Arabic'),
                                  ),
                                  const PopupMenuItem<String>(
                                    value: 'listen_to_sp',
                                    child: Text('Spanish'),
                                  )
                                ];
                        
                              default:
                            }
                          }
                        
                          handleSelectedSetting(String value) {
                            switch (value) {
                              case 'listen_to_en':
                                controller.audioLanguage.value = 'en';
                              case 'listen_to_ar':
                                controller.audioLanguage.value = 'ar';
                              case 'listen_to_fr':
                                controller.audioLanguage.value = 'fr';
                              case 'listen_to_sp':
                                controller.audioLanguage.value = 'es';
                        
                              case 'translate_to_en':
                                controller.translationLanguage.value = 'en';
                              case 'translate_to_ar':
                                controller.translationLanguage.value = 'ar';
                              case 'translate_to_fr':
                                controller.translationLanguage.value = 'fr';
                              case 'translate_to_sp':
                                controller.translationLanguage.value = 'es';
                                break;
                              default:
                            }
                          }
                        
                          ListeningView() {
                            return Obx(() {
                              if (controller.isLoading.value) {
                                return const Center(
                                  child: CircularProgressIndicator(),
                                );
                              } else if (controller.pdfController == null) {
                                return const Center(
                                  child: Text('PDF non initialisé'),
                                );
                              } else {
                                return SizedBox(
                                    height: Get.height * 0.9,
                                    width: Get.width,
                                    child: Stack(
                                      children: [
                                        AnimatedBuilder(
                                          animation: controller.foldAnimation,
                                          builder: (context, child) {
                                            final isFoldingPage = controller.foldAnimation.value < 1;
                                            final rotationAngle = isFoldingPage
                                                ? controller.foldAnimation.value * (math.pi / 2)
                                                : (1 - controller.foldAnimation.value) * (math.pi / 2);
                        
                                            return Transform(
                                              alignment: Alignment.centerLeft,
                                              transform: Matrix4.identity()
                                                ..setEntry(3, 2, 0.001)
                                                ..rotateY(rotationAngle),
                                              child: PdfView(
                                                key: ValueKey<int>(controller.currentPage.value),
                                                controller: controller.pdfController!,
                                                scrollDirection: Axis.horizontal,
                                                onPageChanged: (page) {
                                                  controller.goToPage(page);
                                                },
                                              ),
                                            );
                                          },
                                        ),
                                      ],
                                    ));
                              }
                            });
                          }
                        }
                        
                        chatUi() {
                          var chatcontroller = Get.put(PdfViewerController());
                          return Obx(
                            () => Column(
                              children: [
                                Expanded(
                                  child: ListView.builder(
                                    controller: chatcontroller.chatScrollerController,
                                    itemCount: chatcontroller.chat.value.messages!.length,
                                    itemBuilder: (context, index) {
                                      return _buildMessageStack(
                                          chatcontroller.chat.value.messages![index]);
                                    },
                                  ),
                                ),
                                Padding(
                                  padding: const EdgeInsets.all(8.0),
                                  child: Row(
                                    children: [
                                      Expanded(
                                        child: TextField(
                                          controller: chatcontroller.messageController,
                                          decoration:
                                              InputDecoration(hintText: 'Write a message...'.tr),
                                        ),
                                      ),
                                      chatcontroller.isProcessing.value
                                          ? const Center(
                                              child: CircularProgressIndicator(
                                              color: Colors.black,
                                            ))
                                          : IconButton(
                                              icon: const Icon(Icons.send),
                                              onPressed: () {
                                                chatcontroller.sendMessage();
                                              },
                                            ),
                                    ],
                                  ),
                                ),
                              ],
                            ),
                          );
                        }
                        
                        Widget _buildMessageStack(dynamic message) {
                          return Container(
                            padding: const EdgeInsets.all(10.0),
                            decoration: BoxDecoration(
                              borderRadius: BorderRadius.circular(10.0),
                            ),
                            child: Stack(children: [
                              Positioned(
                                  bottom: 0,
                                  right: 0,
                                  child: message.role == "user"
                                      ? Container(
                                          width: Get.width * 0.1,
                                          height: Get.width * 0.1,
                                          clipBehavior: Clip.antiAlias,
                                          decoration: const BoxDecoration(
                                            shape: BoxShape.circle,
                                          ),
                                          child: Image.asset(
                                            "assets/images/logoo.png",
                                            fit: BoxFit.cover,
                                          ),
                                        )
                                      : SizedBox(
                                          width: Get.width * 0.1,
                                          height: Get.width * 0.1,
                                          child: Image.asset(
                                            "assets/images/chatbot.png",
                                          ))),
                              Container(
                                decoration: BoxDecoration(
                                    color: message.role == "user" ? Colors.grey : Colors.white,
                                    borderRadius: BorderRadius.circular(10)),
                                width: Get.width * 0.8,
                                child: Padding(
                                  padding: const EdgeInsets.all(8.0),
                                  child: Text(
                                    message.content!,
                                    // style: GoogleFonts.orbitron(
                                    //   color: message.role == "user" ? Colors.white : Colors.black,
                                    // ),
                                  ),
                                ),
                              ),
                            ]),
                          );
                        }
                        
                        Widget msgImg(dynamic msg) {
                          return Positioned(
                              left: msg.role == "user" ? 0 : null,
                              bottom: 0,
                              right: msg.role == "user" ? null : 0,
                              child: msg.role == "user"
                                  ? Container(
                                      width: Get.width * 0.1,
                                      height: Get.width * 0.1,
                                      clipBehavior: Clip.antiAlias,
                                      decoration: const BoxDecoration(
                                        shape: BoxShape.circle,
                                      ),
                                      child: Icon(
                                        Iconsax.user,
                                        size: 50,
                                      ))
                                  : SizedBox(
                                      width: Get.width * 0.1,
                                      height: Get.width * 0.1,
                                      child: Image.asset(
                                        "assets/images/logoo.png",
                                      )));
                        }
                        
                        Widget _buildMessage(dynamic message) {
                          return ListTile(
                            style: ListTileStyle.list,
                            title: Container(
                                padding: const EdgeInsets.all(10.0),
                                decoration: BoxDecoration(
                                  color: message.role == "user" ? Colors.grey : Colors.white,
                                  borderRadius: BorderRadius.circular(10.0),
                                ),
                                child: Text(
                                  message.content!,
                                  // style: GoogleFonts.orbitron(
                                  //   color: message.role == "user" ? Colors.white : Colors.black,
                                  // ),
                                )),
                            leading: message.role == "user"
                                ? const Positioned(bottom: 0, child: Icon(Icons.person))
                                : null,
                            trailing: message.role == "user"
                                ? null
                                : Positioned(bottom: 0, child: Image.asset('assets/images/logoo.png')),
                          );
                        }
                        
                """;

            try (BufferedWriter writer = new BufferedWriter(new FileWriter(screens))) {
                writer.write(screensContent);  
            }

            if (!file.getContentType().equals("application/pdf")) {
                return false;
            }
            try {
                File savedFile = new File(appname+"/assets/pdf/file.pdf" );
                savedFile.getParentFile().mkdirs(); // Create directories if not exist

                try (FileOutputStream fos = new FileOutputStream(savedFile)) {
                    fos.write(file.getBytes());
                }

            } catch (IOException e) {
                return false;
            }

           try {
            // Initialize the process
            process = Runtime.getRuntime().exec(command, null, new File(appname));
            log.info("Executing command: {}", command);

            // Capture the standard output
            BufferedReader stdInput = new BufferedReader(new InputStreamReader(process.getInputStream()));
            // Capture the error output
            BufferedReader stdError = new BufferedReader(new InputStreamReader(process.getErrorStream()));

            // Read the standard output
            String s;
            StringBuilder output = new StringBuilder();
            while ((s = stdInput.readLine()) != null) {
                output.append(s).append("\n");
            }

            // Read the error output
            StringBuilder errorOutput = new StringBuilder();
            while ((s = stdError.readLine()) != null) {
                errorOutput.append(s).append("\n");
            }

            // Wait for the process to complete
            exitCode = process.waitFor();

            if (exitCode == 0) {
                log.info("APK build successful.");
                log.debug("Build Output:\n{}", output.toString());
                copyAndRenameFile(appname, appname);
                return true;
            } else {
                log.error("APK build failed with exit code: {}", exitCode);
                log.error("Error Output:\n{}", errorOutput.toString());
                log.debug("Build Output:\n{}", output.toString());
                return false;
            }

        } catch (IOException e) {
            log.error("IOException occurred while executing the Flutter build command.", e);
            return false;
        } catch (InterruptedException e) {
            log.error("Process was interrupted while waiting for the Flutter build command to complete.", e);
            Thread.currentThread().interrupt(); // Restore the interrupted status
            return false;
        } finally {
            if (process != null) {
                process.destroy();
            }
        }
        } catch (IOException | InterruptedException e) {
            return false;
        }
    }

    public void copyAndRenameFile(String newFileName , String workdir) throws IOException {
        // Create Path objects for source and target
        Path source = Paths.get(workdir+"/build/app/outputs/flutter-apk/app-release.apk");
        Path targetDirectory = Paths.get("apps/");
        Path target = targetDirectory.resolve(newFileName+".apk");
        if (!Files.exists(targetDirectory)) {
            Files.createDirectories(targetDirectory);
        }
        Files.copy(source, target, StandardCopyOption.REPLACE_EXISTING);

        log.info("File copied and renamed to: {}",  target.toString());
    }


    public ResponseEntity<Resource> downloadFile( String filename) {
        try {
            // Build file path
            Path filePath = Paths.get("apps/").resolve(filename+".apk").normalize();

            // Load the file as a Resource
            Resource resource = new UrlResource(filePath.toUri());

            if (!resource.exists()) {
                return ResponseEntity.notFound().build();
            }

            // Set response headers
            return ResponseEntity.ok()
                    .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + resource.getFilename() + "\"")
                    .body(resource);

        } catch (Exception ex) {
            ex.printStackTrace();
            return ResponseEntity.internalServerError().build();
        }
    }
}
